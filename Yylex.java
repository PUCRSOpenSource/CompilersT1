/* The following code was generated by JFlex 1.4.3 on 4/3/15 2:29 AM */



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/3/15 2:29 AM from the specification file
 * <tt>asdr_lex.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\31\1\32\1\1\1\1\2\0\1\1\16\31\4\0\1\1\3\0"+
    "\1\30\3\0\1\34\1\34\1\0\1\34\1\34\3\0\12\33\1\0"+
    "\1\34\1\0\1\34\3\0\32\30\4\0\1\30\1\0\1\2\1\7"+
    "\1\13\1\4\1\10\1\22\1\11\1\27\1\12\1\30\1\26\1\21"+
    "\1\24\1\3\1\15\1\25\1\30\1\5\1\14\1\16\1\23\1\17"+
    "\1\20\1\30\1\6\1\30\1\34\1\0\1\34\1\0\41\31\2\0"+
    "\4\30\4\0\1\30\2\0\1\31\7\0\1\30\4\0\1\30\5\0"+
    "\27\30\1\0\37\30\1\0\u01ca\30\4\0\14\30\16\0\5\30\7\0"+
    "\1\30\1\0\1\30\21\0\160\31\5\30\1\0\2\30\2\0\4\30"+
    "\10\0\1\30\1\0\3\30\1\0\1\30\1\0\24\30\1\0\123\30"+
    "\1\0\213\30\1\0\5\31\2\0\236\30\11\0\46\30\2\0\1\30"+
    "\7\0\47\30\7\0\1\30\1\0\55\31\1\0\1\31\1\0\2\31"+
    "\1\0\2\31\1\0\1\31\10\0\33\30\5\0\3\30\15\0\5\31"+
    "\6\0\1\30\4\0\13\31\5\0\53\30\37\31\4\0\2\30\1\31"+
    "\143\30\1\0\1\30\10\31\1\0\6\31\2\30\2\31\1\0\4\31"+
    "\2\30\12\31\3\30\2\0\1\30\17\0\1\31\1\30\1\31\36\30"+
    "\33\31\2\0\131\30\13\31\1\30\16\0\12\31\41\30\11\31\2\30"+
    "\4\0\1\30\5\0\26\30\4\31\1\30\11\31\1\30\3\31\1\30"+
    "\5\31\22\0\31\30\3\31\104\0\1\30\1\0\13\30\67\0\33\31"+
    "\1\0\4\31\66\30\3\31\1\30\22\31\1\30\7\31\12\30\2\31"+
    "\2\0\12\31\1\0\7\30\1\0\7\30\1\0\3\31\1\0\10\30"+
    "\2\0\2\30\2\0\26\30\1\0\7\30\1\0\1\30\3\0\4\30"+
    "\2\0\1\31\1\30\7\31\2\0\2\31\2\0\3\31\1\30\10\0"+
    "\1\31\4\0\2\30\1\0\3\30\2\31\2\0\12\31\4\30\7\0"+
    "\1\30\5\0\3\31\1\0\6\30\4\0\2\30\2\0\26\30\1\0"+
    "\7\30\1\0\2\30\1\0\2\30\1\0\2\30\2\0\1\31\1\0"+
    "\5\31\4\0\2\31\2\0\3\31\3\0\1\31\7\0\4\30\1\0"+
    "\1\30\7\0\14\31\3\30\1\31\13\0\3\31\1\0\11\30\1\0"+
    "\3\30\1\0\26\30\1\0\7\30\1\0\2\30\1\0\5\30\2\0"+
    "\1\31\1\30\10\31\1\0\3\31\1\0\3\31\2\0\1\30\17\0"+
    "\2\30\2\31\2\0\12\31\1\0\1\30\17\0\3\31\1\0\10\30"+
    "\2\0\2\30\2\0\26\30\1\0\7\30\1\0\2\30\1\0\5\30"+
    "\2\0\1\31\1\30\7\31\2\0\2\31\2\0\3\31\10\0\2\31"+
    "\4\0\2\30\1\0\3\30\2\31\2\0\12\31\1\0\1\30\20\0"+
    "\1\31\1\30\1\0\6\30\3\0\3\30\1\0\4\30\3\0\2\30"+
    "\1\0\1\30\1\0\2\30\3\0\2\30\3\0\3\30\3\0\14\30"+
    "\4\0\5\31\3\0\3\31\1\0\4\31\2\0\1\30\6\0\1\31"+
    "\16\0\12\31\11\0\1\30\7\0\3\31\1\0\10\30\1\0\3\30"+
    "\1\0\27\30\1\0\12\30\1\0\5\30\3\0\1\30\7\31\1\0"+
    "\3\31\1\0\4\31\7\0\2\31\1\0\2\30\6\0\2\30\2\31"+
    "\2\0\12\31\22\0\2\31\1\0\10\30\1\0\3\30\1\0\27\30"+
    "\1\0\12\30\1\0\5\30\2\0\1\31\1\30\7\31\1\0\3\31"+
    "\1\0\4\31\7\0\2\31\7\0\1\30\1\0\2\30\2\31\2\0"+
    "\12\31\1\0\2\30\17\0\2\31\1\0\10\30\1\0\3\30\1\0"+
    "\51\30\2\0\1\30\7\31\1\0\3\31\1\0\4\31\1\30\10\0"+
    "\1\31\10\0\2\30\2\31\2\0\12\31\12\0\6\30\2\0\2\31"+
    "\1\0\22\30\3\0\30\30\1\0\11\30\1\0\1\30\2\0\7\30"+
    "\3\0\1\31\4\0\6\31\1\0\1\31\1\0\10\31\22\0\2\31"+
    "\15\0\60\30\1\31\2\30\7\31\4\0\10\30\10\31\1\0\12\31"+
    "\47\0\2\30\1\0\1\30\2\0\2\30\1\0\1\30\2\0\1\30"+
    "\6\0\4\30\1\0\7\30\1\0\3\30\1\0\1\30\1\0\1\30"+
    "\2\0\2\30\1\0\4\30\1\31\2\30\6\31\1\0\2\31\1\30"+
    "\2\0\5\30\1\0\1\30\1\0\6\31\2\0\12\31\2\0\4\30"+
    "\40\0\1\30\27\0\2\31\6\0\12\31\13\0\1\31\1\0\1\31"+
    "\1\0\1\31\4\0\2\31\10\30\1\0\44\30\4\0\24\31\1\0"+
    "\2\31\5\30\13\31\1\0\44\31\11\0\1\31\71\0\53\30\24\31"+
    "\1\30\12\31\6\0\6\30\4\31\4\30\3\31\1\30\3\31\2\30"+
    "\7\31\3\30\4\31\15\30\14\31\1\30\17\31\2\0\46\30\1\0"+
    "\1\30\5\0\1\30\2\0\53\30\1\0\u014d\30\1\0\4\30\2\0"+
    "\7\30\1\0\1\30\1\0\4\30\2\0\51\30\1\0\4\30\2\0"+
    "\41\30\1\0\4\30\2\0\7\30\1\0\1\30\1\0\4\30\2\0"+
    "\17\30\1\0\71\30\1\0\4\30\2\0\103\30\2\0\3\31\40\0"+
    "\20\30\20\0\125\30\14\0\u026c\30\2\0\21\30\1\0\32\30\5\0"+
    "\113\30\3\0\3\30\17\0\15\30\1\0\4\30\3\31\13\0\22\30"+
    "\3\31\13\0\22\30\2\31\14\0\15\30\1\0\3\30\1\0\2\31"+
    "\14\0\64\30\40\31\3\0\1\30\3\0\2\30\1\31\2\0\12\31"+
    "\41\0\3\31\2\0\12\31\6\0\130\30\10\0\51\30\1\31\1\30"+
    "\5\0\106\30\12\0\35\30\3\0\14\31\4\0\14\31\12\0\12\31"+
    "\36\30\2\0\5\30\13\0\54\30\4\0\21\31\7\30\2\31\6\0"+
    "\12\31\46\0\27\30\5\31\4\0\65\30\12\31\1\0\35\31\2\0"+
    "\13\31\6\0\12\31\15\0\1\30\130\0\5\31\57\30\21\31\7\30"+
    "\4\0\12\31\21\0\11\31\14\0\3\31\36\30\15\31\2\30\12\31"+
    "\54\30\16\31\14\0\44\30\24\31\10\0\12\31\3\0\3\30\12\31"+
    "\44\30\122\0\3\31\1\0\25\31\4\30\1\31\4\30\3\31\2\30"+
    "\11\0\300\30\47\31\25\0\4\31\u0116\30\2\0\6\30\2\0\46\30"+
    "\2\0\6\30\2\0\10\30\1\0\1\30\1\0\1\30\1\0\1\30"+
    "\1\0\37\30\2\0\65\30\1\0\7\30\1\0\1\30\3\0\3\30"+
    "\1\0\7\30\3\0\4\30\2\0\6\30\4\0\15\30\5\0\3\30"+
    "\1\0\7\30\16\0\5\31\32\0\5\31\20\0\2\30\23\0\1\30"+
    "\13\0\5\31\5\0\6\31\1\0\1\30\15\0\1\30\20\0\15\30"+
    "\3\0\33\30\25\0\15\31\4\0\1\31\3\0\14\31\21\0\1\30"+
    "\4\0\1\30\2\0\12\30\1\0\1\30\3\0\5\30\6\0\1\30"+
    "\1\0\1\30\1\0\1\30\1\0\4\30\1\0\13\30\2\0\4\30"+
    "\5\0\5\30\4\0\1\30\21\0\51\30\u0a77\0\57\30\1\0\57\30"+
    "\1\0\205\30\6\0\4\30\3\31\2\30\14\0\46\30\1\0\1\30"+
    "\5\0\1\30\2\0\70\30\7\0\1\30\17\0\1\31\27\30\11\0"+
    "\7\30\1\0\7\30\1\0\7\30\1\0\7\30\1\0\7\30\1\0"+
    "\7\30\1\0\7\30\1\0\7\30\1\0\40\31\57\0\1\30\u01d5\0"+
    "\3\30\31\0\11\30\6\31\1\0\5\30\2\0\5\30\4\0\126\30"+
    "\2\0\2\31\2\0\3\30\1\0\132\30\1\0\4\30\5\0\51\30"+
    "\3\0\136\30\21\0\33\30\65\0\20\30\u0200\0\u19b6\30\112\0\u51cd\30"+
    "\63\0\u048d\30\103\0\56\30\2\0\u010d\30\3\0\20\30\12\31\2\30"+
    "\24\0\57\30\1\31\4\0\12\31\1\0\31\30\7\0\1\31\120\30"+
    "\2\31\45\0\11\30\2\0\147\30\2\0\4\30\1\0\4\30\14\0"+
    "\13\30\115\0\12\30\1\31\3\30\1\31\4\30\1\31\27\30\5\31"+
    "\20\0\1\30\7\0\64\30\14\0\2\31\62\30\21\31\13\0\12\31"+
    "\6\0\22\31\6\30\3\0\1\30\4\0\12\31\34\30\10\31\2\0"+
    "\27\30\15\31\14\0\35\30\3\0\4\31\57\30\16\31\16\0\1\30"+
    "\12\31\46\0\51\30\16\31\11\0\3\30\1\31\10\30\2\31\2\0"+
    "\12\31\6\0\27\30\3\0\1\30\1\31\4\0\60\30\1\31\1\30"+
    "\3\31\2\30\2\31\5\30\2\31\1\30\1\31\1\30\30\0\3\30"+
    "\2\0\13\30\5\31\2\0\3\30\2\31\12\0\6\30\2\0\6\30"+
    "\2\0\6\30\11\0\7\30\1\0\7\30\221\0\43\30\10\31\1\0"+
    "\2\31\2\0\12\31\6\0\u2ba4\30\14\0\27\30\4\0\61\30\u2104\0"+
    "\u016e\30\2\0\152\30\46\0\7\30\14\0\5\30\5\0\1\30\1\31"+
    "\12\30\1\0\15\30\1\0\5\30\1\0\1\30\1\0\2\30\1\0"+
    "\2\30\1\0\154\30\41\0\u016b\30\22\0\100\30\2\0\66\30\50\0"+
    "\15\30\3\0\20\31\20\0\7\31\14\0\2\30\30\0\3\30\31\0"+
    "\1\30\6\0\5\30\1\0\207\30\2\0\1\31\4\0\1\30\13\0"+
    "\12\31\7\0\32\30\4\0\1\30\1\0\32\30\13\0\131\30\3\0"+
    "\6\30\2\0\6\30\2\0\6\30\2\0\3\30\3\0\2\30\3\0"+
    "\2\30\22\0\3\31\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\24\3\1\4\1\5\5\3\1\6"+
    "\5\3\1\7\1\10\3\3\1\11\1\12\1\3\1\13"+
    "\14\3\1\14\1\3\1\15\1\16\1\17\4\3\1\20"+
    "\4\3\1\21\2\3\1\22\4\3\1\23\2\3\1\24"+
    "\7\3\1\25\1\26\1\27\1\3\1\30\1\31\1\32"+
    "\2\3\1\33\5\3\1\34\3\3\1\35\1\36\1\37"+
    "\1\40\1\3\1\41\3\3\1\42\1\43\1\44\1\3"+
    "\1\45\3\3\1\46\1\3\1\47\1\3\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\35\0\72\0\127\0\164\0\221\0\256\0\313"+
    "\0\350\0\u0105\0\u0122\0\u013f\0\u015c\0\u0179\0\u0196\0\u01b3"+
    "\0\u01d0\0\u01ed\0\u020a\0\u0227\0\u0244\0\u0261\0\u027e\0\u029b"+
    "\0\35\0\u02b8\0\u02d5\0\u02f2\0\u030f\0\u032c\0\u0349\0\u0366"+
    "\0\u0383\0\u03a0\0\u03bd\0\u03da\0\313\0\313\0\u03f7\0\u0414"+
    "\0\u0431\0\313\0\313\0\u044e\0\313\0\u046b\0\u0488\0\u04a5"+
    "\0\u04c2\0\u04df\0\u04fc\0\u0519\0\u0536\0\u0553\0\u0570\0\u058d"+
    "\0\u05aa\0\313\0\u05c7\0\313\0\313\0\313\0\u05e4\0\u0601"+
    "\0\u061e\0\u063b\0\313\0\u0658\0\u0675\0\u0692\0\u06af\0\313"+
    "\0\u06cc\0\u06e9\0\313\0\u0706\0\u0723\0\u0740\0\u075d\0\313"+
    "\0\u077a\0\u0797\0\313\0\u07b4\0\u07d1\0\u07ee\0\u080b\0\u0828"+
    "\0\u0845\0\u0862\0\313\0\313\0\313\0\u087f\0\313\0\313"+
    "\0\313\0\u089c\0\u08b9\0\313\0\u08d6\0\u08f3\0\u0910\0\u092d"+
    "\0\u094a\0\313\0\u0967\0\u0984\0\u09a1\0\313\0\313\0\313"+
    "\0\313\0\u09be\0\313\0\u09db\0\u09f8\0\u0a15\0\313\0\313"+
    "\0\313\0\u0a32\0\313\0\u0a4f\0\u0a6c\0\u0a89\0\313\0\u0aa6"+
    "\0\313\0\u0ac3\0\313";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\3\10\1\2"+
    "\1\3\1\30\1\31\36\0\1\3\30\0\1\3\4\0"+
    "\1\10\1\32\1\10\1\33\26\10\3\0\10\10\1\34"+
    "\2\10\1\35\16\10\3\0\10\10\1\36\2\10\1\37"+
    "\16\10\3\0\6\10\1\40\23\10\3\0\32\10\3\0"+
    "\6\10\1\41\23\10\3\0\1\10\1\42\15\10\1\43"+
    "\12\10\3\0\13\10\1\44\16\10\3\0\1\10\1\45"+
    "\16\10\1\46\11\10\3\0\1\47\12\10\1\50\16\10"+
    "\3\0\6\10\1\51\23\10\3\0\3\10\1\52\14\10"+
    "\1\53\11\10\3\0\4\10\1\54\6\10\1\55\11\10"+
    "\1\56\4\10\3\0\1\57\31\10\3\0\10\10\1\60"+
    "\14\10\1\61\4\10\3\0\1\62\31\10\3\0\10\10"+
    "\1\63\2\10\1\64\5\10\1\65\10\10\3\0\1\10"+
    "\1\66\30\10\3\0\13\10\1\67\16\10\3\0\1\70"+
    "\2\10\1\71\26\10\34\0\1\30\3\0\2\10\1\72"+
    "\27\10\3\0\3\10\1\73\26\10\3\0\17\10\1\74"+
    "\12\10\3\0\14\10\1\75\15\10\3\0\15\10\1\76"+
    "\14\10\3\0\16\10\1\77\13\10\3\0\11\10\1\100"+
    "\11\10\1\101\6\10\3\0\7\10\1\102\22\10\3\0"+
    "\2\10\1\103\27\10\3\0\12\10\1\104\17\10\3\0"+
    "\14\10\1\105\15\10\3\0\12\10\1\106\17\10\3\0"+
    "\1\10\1\107\30\10\3\0\14\10\1\110\15\10\3\0"+
    "\23\10\1\111\6\10\3\0\6\10\1\112\23\10\3\0"+
    "\3\10\1\113\26\10\3\0\14\10\1\114\15\10\3\0"+
    "\10\10\1\115\21\10\3\0\5\10\1\116\24\10\3\0"+
    "\17\10\1\117\12\10\3\0\3\10\1\120\26\10\3\0"+
    "\1\10\1\121\30\10\3\0\14\10\1\122\15\10\3\0"+
    "\2\10\1\123\27\10\3\0\11\10\1\124\20\10\3\0"+
    "\13\10\1\125\16\10\3\0\1\126\31\10\3\0\1\10"+
    "\1\127\30\10\3\0\13\10\1\130\16\10\3\0\6\10"+
    "\1\131\23\10\3\0\10\10\1\132\21\10\3\0\6\10"+
    "\1\133\23\10\3\0\13\10\1\134\16\10\3\0\6\10"+
    "\1\135\23\10\3\0\12\10\1\136\17\10\3\0\6\10"+
    "\1\137\23\10\3\0\1\10\1\140\30\10\3\0\25\10"+
    "\1\141\4\10\3\0\17\10\1\142\12\10\3\0\6\10"+
    "\1\143\23\10\3\0\6\10\1\144\23\10\3\0\11\10"+
    "\1\145\20\10\3\0\10\10\1\146\21\10\3\0\24\10"+
    "\1\147\5\10\3\0\7\10\1\150\1\10\1\151\20\10"+
    "\3\0\4\10\1\152\25\10\3\0\14\10\1\153\15\10"+
    "\3\0\3\10\1\154\26\10\3\0\1\155\31\10\3\0"+
    "\1\10\1\156\30\10\3\0\14\10\1\157\15\10\3\0"+
    "\6\10\1\160\23\10\3\0\17\10\1\161\12\10\3\0"+
    "\14\10\1\162\15\10\3\0\17\10\1\163\12\10\3\0"+
    "\6\10\1\164\23\10\3\0\3\10\1\165\26\10\3\0"+
    "\6\10\1\166\23\10\3\0\13\10\1\167\16\10\3\0"+
    "\2\10\1\170\27\10\3\0\14\10\1\171\15\10\3\0"+
    "\10\10\1\172\21\10\3\0\2\10\1\173\27\10\3\0"+
    "\1\174\31\10\3\0\2\10\1\175\27\10\3\0\13\10"+
    "\1\176\16\10\3\0\22\10\1\177\7\10\3\0\21\10"+
    "\1\200\10\10\3\0\1\10\1\201\30\10\3\0\3\10"+
    "\1\202\26\10\3\0\6\10\1\203\23\10\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2784];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\26\1\1\11\152\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int comment_count = 0;

  private AsdrSample yyparser;

  public Yylex(java.io.Reader r, AsdrSample yyparser) {
    this(r);
    this.yyparser = yyparser;
  }




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2228) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16: 
          { return AsdrSample.END;
          }
        case 41: break;
        case 24: 
          { return AsdrSample.TYPE;
          }
        case 42: break;
        case 34: 
          { return AsdrSample.DOWNTO;
          }
        case 43: break;
        case 40: 
          { return AsdrSample.PROCEDURE;
          }
        case 44: break;
        case 29: 
          { return AsdrSample.BEGIN;
          }
        case 45: break;
        case 39: 
          { return AsdrSample.FUNCTION;
          }
        case 46: break;
        case 20: 
          { return AsdrSample.MOD;
          }
        case 47: break;
        case 10: 
          { return AsdrSample.OF;
          }
        case 48: break;
        case 1: 
          { System.out.println("Erro lexico: caracter invalido: <" + yytext() + ">");
          }
        case 49: break;
        case 26: 
          { return AsdrSample.WITH;
          }
        case 50: break;
        case 38: 
          { return AsdrSample.PROGRAM;
          }
        case 51: break;
        case 15: 
          { return AsdrSample.DIV;
          }
        case 52: break;
        case 9: 
          { return AsdrSample.OR;
          }
        case 53: break;
        case 7: 
          { return AsdrSample.IN;
          }
        case 54: break;
        case 12: 
          { return AsdrSample.AND;
          }
        case 55: break;
        case 14: 
          { return AsdrSample.NOT;
          }
        case 56: break;
        case 25: 
          { return AsdrSample.THEN;
          }
        case 57: break;
        case 37: 
          { return AsdrSample.PACKED;
          }
        case 58: break;
        case 32: 
          { return AsdrSample.LABEL;
          }
        case 59: break;
        case 33: 
          { return AsdrSample.UNTIL;
          }
        case 60: break;
        case 21: 
          { return AsdrSample.ELSE;
          }
        case 61: break;
        case 23: 
          { return AsdrSample.CASE;
          }
        case 62: break;
        case 6: 
          { return AsdrSample.DO;
          }
        case 63: break;
        case 17: 
          { return AsdrSample.SET;
          }
        case 64: break;
        case 31: 
          { return AsdrSample.WHILE;
          }
        case 65: break;
        case 13: 
          { return AsdrSample.NIL;
          }
        case 66: break;
        case 3: 
          { return AsdrSample.IDENT;
          }
        case 67: break;
        case 35: 
          { return AsdrSample.RECORD;
          }
        case 68: break;
        case 30: 
          { return AsdrSample.CONST;
          }
        case 69: break;
        case 11: 
          { return AsdrSample.TO;
          }
        case 70: break;
        case 19: 
          { return AsdrSample.FOR;
          }
        case 71: break;
        case 36: 
          { return AsdrSample.REPEAT;
          }
        case 72: break;
        case 5: 
          { return yytext().charAt(0);
          }
        case 73: break;
        case 22: 
          { return AsdrSample.GOTO;
          }
        case 74: break;
        case 27: 
          { return AsdrSample.FILE;
          }
        case 75: break;
        case 8: 
          { return AsdrSample.IF;
          }
        case 76: break;
        case 18: 
          { return AsdrSample.VAR;
          }
        case 77: break;
        case 28: 
          { return AsdrSample.ARRAY;
          }
        case 78: break;
        case 4: 
          { return AsdrSample.NUM;
          }
        case 79: break;
        case 2: 
          { 
          }
        case 80: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
